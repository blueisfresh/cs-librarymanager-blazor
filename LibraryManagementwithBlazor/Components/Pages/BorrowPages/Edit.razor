@page "/borrows/edit"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<LibraryManagementwithBlazor.Data.LibraryManagementwithBlazorContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Borrow</h2>
<hr />
@if (Borrow is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Borrow" OnValidSubmit="UpdateBorrow" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Borrow.BorrowID" value="@Borrow.BorrowID" />
                <div class="mb-3">
                    <label for="studentlibrarycardnum" class="form-label">StudentLibraryCardNum:</label>
                    <InputNumber id="studentlibrarycardnum" @bind-Value="Borrow.StudentLibraryCardNum" class="form-control" />
                    <ValidationMessage For="() => Borrow.StudentLibraryCardNum" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="bookbooknum" class="form-label">BookBookNum:</label>
                    <InputText id="bookbooknum" @bind-Value="Borrow.BookBookNum" class="form-control" />
                    <ValidationMessage For="() => Borrow.BookBookNum" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="borrowdate" class="form-label">BorrowDate:</label>
                    <InputDate id="borrowdate" @bind-Value="Borrow.BorrowDate" class="form-control" />
                    <ValidationMessage For="() => Borrow.BorrowDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="returndate" class="form-label">ReturnDate:</label>
                    <InputDate id="returndate" @bind-Value="Borrow.ReturnDate" class="form-control" />
                    <ValidationMessage For="() => Borrow.ReturnDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="duedate" class="form-label">DueDate:</label>
                    <InputDate id="duedate" @bind-Value="Borrow.DueDate" class="form-control" />
                    <ValidationMessage For="() => Borrow.DueDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/borrows">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int BorrowID { get; set; }

    [SupplyParameterFromForm]
    private Borrow? Borrow { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Borrow ??= await context.TblBorrow.FirstOrDefaultAsync(m => m.BorrowID == BorrowID);

        if (Borrow is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBorrow()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Borrow!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BorrowExists(Borrow!.BorrowID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/borrows");
    }

    private bool BorrowExists(int borrowid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.TblBorrow.Any(e => e.BorrowID == borrowid);
    }
}
