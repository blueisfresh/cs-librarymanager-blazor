@page "/students/edit"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<LibraryManagementwithBlazor.Data.LibraryManagementwithBlazorContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Edit Student</PageTitle>

<div class="p-6 max-w-md mx-auto bg-white rounded-xl shadow-md space-y-4">
    <h3 class="text-xl font-bold text-center">Edit Student</h3>
    @if (Student is null)
    {
        <p class="text-center text-gray-500"><em>Loading...</em></p>
    }
    else
    {
        <EditForm method="post" Model="Student" OnValidSubmit="UpdateStudent" class="space-y-4">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <!-- Library Card Number -->
            <div class="space-y-1">
                <label for="librarycardnum" class="font-medium">Library Card Number:</label>
                <InputNumber id="librarycardnum" @bind-Value="Student.LibraryCardNum" class="w-full border border-gray-300 rounded-md p-2" aria-required="true" disabled />
                <ValidationMessage For="() => Student.LibraryCardNum" class="text-red-500 text-sm" />
            </div>

            <!-- First Name -->
            <div class="space-y-1">
                <label for="firstname" class="font-medium">First Name:</label>
                <InputText id="firstname" @bind-Value="Student.FirstName" class="w-full border border-gray-300 rounded-md p-2" aria-required="true" />
                <ValidationMessage For="() => Student.FirstName" class="text-red-500 text-sm" />
            </div>

            <!-- Last Name -->
            <div class="space-y-1">
                <label for="lastname" class="font-medium">Last Name:</label>
                <InputText id="lastname" @bind-Value="Student.LastName" class="w-full border border-gray-300 rounded-md p-2" aria-required="true" />
                <ValidationMessage For="() => Student.LastName" class="text-red-500 text-sm" />
            </div>

            <!-- Buttons -->
            <div class="flex justify-center space-x-4 mt-4">
                <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                    Save
                </button>
                <a href="/students" class="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600">
                    Back to List
                </a>
            </div>
        </EditForm>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private int LibraryCardNum { get; set; }

    [SupplyParameterFromForm]
    private Student? Student { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Student ??= await context.TblStudent.FirstOrDefaultAsync(m => m.LibraryCardNum == LibraryCardNum);

        if (Student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateStudent()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Student!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!StudentExists(Student!.LibraryCardNum))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/students");
    }

    private bool StudentExists(int librarycardnum)
    {
        using var context = DbFactory.CreateDbContext();
        return context.TblStudent.Any(e => e.LibraryCardNum == librarycardnum);
    }
}
