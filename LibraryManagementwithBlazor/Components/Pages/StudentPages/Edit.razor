@page "/students/edit"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<LibraryManagementwithBlazor.Data.LibraryManagementwithBlazorContext> DbFactory
@using LibraryManagementwithBlazor.Services
@inject StudentService studentService
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Student</h2>
<hr />
@if (Student is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Student" OnValidSubmit="UpdateStudent" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input name="Student.LibraryCardNum" value="@Student.LibraryCardNum" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Student.FirstName" class="form-control" />
                    <ValidationMessage For="() => Student.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Student.LastName" class="form-control" />
                    <ValidationMessage For="() => Student.LastName" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/students">Back to List</a>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {
    // UpdateStudentAsync

    [SupplyParameterFromQuery]
    private int LibraryCardNum { get; set; }

    [SupplyParameterFromForm]
    private Student? Student { get; set; }

    private string? errorMessage; // Declare the variable to store error messages

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Student ??= await context.TblStudent.FirstOrDefaultAsync(m => m.LibraryCardNum == LibraryCardNum);

        if (Student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateStudent()
    {
        try
        {
            // Check if the student exists before updating
            var exists = await studentService.StudentExistsAsync(Student!.LibraryCardNum);
            if (!exists)
            {
                errorMessage = "Student not found."; // Display error
                return; // Exit the method early
            }

            // Proceed to update the student
            await studentService.UpdateStudentAsync(Student);
            NavigationManager.NavigateTo("/students"); // Redirect on success
        }
        catch (Exception e)
        {
            errorMessage = e.Message; // Capture any other errors
        }

        NavigationManager.NavigateTo("/students");
    }

}
