@page "/students"
@using Microsoft.EntityFrameworkCore
@using LibraryManagementwithBlazor.Data
@implements IAsyncDisposable
@inject IDbContextFactory<LibraryManagementwithBlazor.Data.LibraryManagementwithBlazorContext> DbFactory

<h3 class="text-lg font-bold text-center mb-4">Student Index</h3>

<div class="flex justify-between items-center mb-4">
    <!-- Create New Button -->
    <a href="students/create" style="margin-right: 1rem;" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
        Create New
    </a>

    <!-- Search Box -->
    <form action="/students" method="get" class="flex items-center border border-gray-300 rounded-lg overflow-hidden shadow-sm">
        <input type="text"
               name="titleFilter"
               placeholder="Search..."
               class="px-4 py-2 text-gray-700 focus:outline-none"
               style="min-width: 200px;" />
        <button type="submit"
                class="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold">
            Search
        </button>
    </form>
</div>

<div class="overflow-x-auto">
    <table class="table-auto w-full border-collapse border border-gray-300 rounded-lg">
        <thead>
            <tr class="bg-gray-200">
                <th class="border border-gray-300 px-4 py-2 text-left">Library Card Number</th>
                <th class="border border-gray-300 px-4 py-2 text-left">First Name</th>
                <th class="border border-gray-300 px-4 py-2 text-left">Last Name</th>
                <th class="border border-gray-300 px-4 py-2 text-left">Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredStudents != null && filteredStudents.Any())
            {
                @foreach (var student in filteredStudents)
                {
                    <tr class="hover:bg-gray-100">
                        <td class="border border-gray-300 px-4 py-2">@student.LibraryCardNum</td>
                        <td class="border border-gray-300 px-4 py-2">@student.FirstName</td>
                        <td class="border border-gray-300 px-4 py-2">@student.LastName</td>
                        <td class="border border-gray-300 px-4 py-2">
                            <a href="@($"students/edit?librarycardnum={student.LibraryCardNum}")" type="button" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 shadow-md">Edit</a>
                            <a href="@($"students/details?librarycardnum={student.LibraryCardNum}")" type="button" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 shadow-md">Details</a>
                            <a href="@($"students/delete?librarycardnum={student.LibraryCardNum}")" type="button" class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 shadow-md">Delete</a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" class="text-center text-gray-500 py-4">No students available</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private LibraryManagementwithBlazorContext context = default!;
    private List<Student> filteredStudents = new List<Student>();

    [Parameter]
    [SupplyParameterFromQuery]
    public string? TitleFilter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        var allStudents = await context.TblStudent
            .Where(s => s.LibraryCardNum != 0) // Exclude anonymized students
            .OrderBy(s => s.LibraryCardNum)    // Ensure consistent ordering
            .ToListAsync();

        if (allStudents.Any())
        {
            allStudents.RemoveAt(0); // Exclude the first student
        }

        if (!string.IsNullOrWhiteSpace(TitleFilter))
        {
            filteredStudents = allStudents
                .Where(s => s.FirstName.Contains(TitleFilter, StringComparison.OrdinalIgnoreCase) ||
                            s.LastName.Contains(TitleFilter, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            filteredStudents = allStudents;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await context.DisposeAsync();
    }
}
