@page "/students"
@using Microsoft.EntityFrameworkCore
@using LibraryManagementwithBlazor.Data
@implements IAsyncDisposable
@inject IDbContextFactory<LibraryManagementwithBlazor.Data.LibraryManagementwithBlazorContext> DbFactory

<h3 class="text-lg font-bold text-center mb-4">Student Index</h3>

<div class="text-center px-4 py-8">
    <h1 class="text-4xl font-bold text-gray-800 mb-4">Welcome to the Library Management System</h1>
    <p class="text-lg text-gray-600">
        Discover, borrow, and manage your library collection with ease.
    </p>
    <p class="text-lg text-gray-600 mt-2">
        Utilize the features below to explore and manage your library:
    </p>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
        <div class="p-6 bg-white border border-gray-200 rounded-lg shadow-md">
            <h2 class="text-2xl font-semibold text-gray-800 mb-2">Books</h2>
            <p class="text-gray-600 mb-4">Explore our collection of books and manage their details.</p>
            <button type="button" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 shadow-md">
                Manage Books
            </button>
        </div>
        <div class="p-6 bg-white border border-gray-200 rounded-lg shadow-md">
            <h2 class="text-2xl font-semibold text-gray-800 mb-2">Students</h2>
            <p class="text-gray-600 mb-4">View and manage student records seamlessly.</p>
            <button type="button" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 shadow-md">
                Manage Students
            </button>
        </div>
        <div class="p-6 bg-white border border-gray-200 rounded-lg shadow-md">
            <h2 class="text-2xl font-semibold text-gray-800 mb-2">Borrow & Return</h2>
            <p class="text-gray-600 mb-4">Handle borrowing and returning of books efficiently.</p>
            <button type="button" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 shadow-md">
                Borrow/Return Books
            </button>
        </div>
        <div class="p-6 bg-white border border-gray-200 rounded-lg shadow-md">
            <h2 class="text-2xl font-semibold text-gray-800 mb-2">Statistics</h2>
            <p class="text-gray-600 mb-4">View insights on book borrowing and library usage.</p>
            <button type="button" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 shadow-md">
                View Statistics
            </button>
        </div>
        <div class="p-6 bg-white border border-gray-200 rounded-lg shadow-md">
            <h2 class="text-2xl font-semibold text-gray-800 mb-2">Import & Export</h2>
            <p class="text-gray-600 mb-4">Manage data import/export to keep your library up-to-date.</p>
            <button type="button" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 shadow-md">
                Import/Export Data
            </button>
        </div>
    </div>
</div>

@code {
    private LibraryManagementwithBlazorContext context = default!;
    private List<Student> filteredStudents = new List<Student>();

    [Parameter]
    [SupplyParameterFromQuery]
    public string? TitleFilter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        var allStudents = await context.TblStudent
            .Where(s => s.LibraryCardNum != 0) // Exclude anonymized students
            .OrderBy(s => s.LibraryCardNum)    // Ensure consistent ordering
            .ToListAsync();

        if (allStudents.Any())
        {
            allStudents.RemoveAt(0); // Exclude the first student
        }

        if (!string.IsNullOrWhiteSpace(TitleFilter))
        {
            filteredStudents = allStudents
                .Where(s => s.FirstName.Contains(TitleFilter, StringComparison.OrdinalIgnoreCase) ||
                            s.LastName.Contains(TitleFilter, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            filteredStudents = allStudents;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await context.DisposeAsync();
    }
}
