@page "/students/delete"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<LibraryManagementwithBlazor.Data.LibraryManagementwithBlazorContext> DbFactory
@using LibraryManagementwithBlazor.Services
@inject StudentService studentService
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Student</h2>
    <hr />
    @if (student is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Library Card-Num</dt>
            <dd class="col-sm-10">@student.LibraryCardNum</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@student.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@student.LastName</dd>
        </dl>
        <EditForm method="post" Model="student" OnValidSubmit="DeleteStudent" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(student is null)">Delete</button> |
            <a href="/students">Back to List</a>
        </EditForm>
    }
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {

    // DeleteStudentAsync
    private string? errorMessage; // Declare the variable to store error messages
    private Student? student;

    [SupplyParameterFromQuery]
    private int LibraryCardNum { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        student = await context.TblStudent.FirstOrDefaultAsync(m => m.LibraryCardNum == LibraryCardNum);

        if (student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteStudent()
    {
        try
        {
            // Check if the student exists before deleting
            var exists = await studentService.StudentExistsAsync(student!.LibraryCardNum);
            if (!exists)
            {
                errorMessage = "Student not found."; // Display error
                return; // Exit the method early
            }

            await studentService.DeleteStudentAsync(LibraryCardNum);
            NavigationManager.NavigateTo("/students"); // Redirect on success
        }
        catch (Exception e)
        {
            errorMessage = e.Message; // Capture any other errors
        }
    }

}
