@page "/students/details"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<LibraryManagementwithBlazor.Data.LibraryManagementwithBlazorContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<div class="p-6 max-w-md mx-auto bg-white rounded-xl shadow-md space-y-4">
    <h3 class="text-xl font-bold text-center">Student Details</h3>
    @if (student is null)
    {
        <p class="text-center text-gray-500"><em>Loading...</em></p>
    }
    else
    {
        <dl class="space-y-2">
            <div class="flex justify-between">
                <dt class="font-medium">First Name:</dt>
                <dd>@student.FirstName</dd>
            </div>
            <div class="flex justify-between">
                <dt class="font-medium">Last Name:</dt>
                <dd>@student.LastName</dd>
            </div>
        </dl>
        <div class="flex justify-center space-x-4 mt-4">
            <a href="@($"/students/edit?librarycardnum={student.LibraryCardNum}")" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                Edit
            </a>
            <a href="/students" class="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600">
                Back to List
            </a>
        </div>
    }
</div>

@code {
    private Student? student;

    [SupplyParameterFromQuery]
    private int LibraryCardNum { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        student = await context.TblStudent.FirstOrDefaultAsync(m => m.LibraryCardNum == LibraryCardNum);

        if (student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
