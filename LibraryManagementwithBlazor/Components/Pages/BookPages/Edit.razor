@page "/books/edit"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<LibraryManagementwithBlazor.Data.LibraryManagementwithBlazorContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Edit Book</PageTitle>

<div class="p-6 max-w-md mx-auto bg-white rounded-xl shadow-md space-y-4">
    <h3 class="text-xl font-bold text-center">Edit Book</h3>
    @if (Book is null)
    {
        <p class="text-center text-gray-500"><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="Book" OnValidSubmit="UpdateBook" class="space-y-4">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <!-- Book Number -->
            <div class="space-y-1">
                <label for="booknum" class="font-medium">Book Number:</label>
                <InputText id="booknum" @bind-Value="Book.BookNum" class="w-full border border-gray-300 rounded-md p-2" aria-required="true" disabled />
                <ValidationMessage For="() => Book.BookNum" class="text-red-500 text-sm" />
            </div>

            <!-- Title -->
            <div class="space-y-1">
                <label for="title" class="font-medium">Title:</label>
                <InputText id="title" @bind-Value="Book.Title" class="w-full border border-gray-300 rounded-md p-2" />
                <ValidationMessage For="() => Book.Title" class="text-red-500 text-sm" />
            </div>

            <!-- Author -->
            <div class="space-y-1">
                <label for="author" class="font-medium">Author:</label>
                <InputText id="author" @bind-Value="Book.Author" class="w-full border border-gray-300 rounded-md p-2" />
                <ValidationMessage For="() => Book.Author" class="text-red-500 text-sm" />
            </div>

            <!-- Publisher -->
            <div class="space-y-1">
                <label for="publisher" class="font-medium">Publisher:</label>
                <InputText id="publisher" @bind-Value="Book.Publisher" class="w-full border border-gray-300 rounded-md p-2" />
                <ValidationMessage For="() => Book.Publisher" class="text-red-500 text-sm" />
            </div>

            <!-- ISBN -->
            <div class="space-y-1">
                <label for="isbn" class="font-medium">ISBN:</label>
                <InputText id="isbn" @bind-Value="Book.ISBN" class="w-full border border-gray-300 rounded-md p-2" />
                <ValidationMessage For="() => Book.ISBN" class="text-red-500 text-sm" />
            </div>

            <!-- Publication Place -->
            <div class="space-y-1">
                <label for="publicationplace" class="font-medium">Publication Place:</label>
                <InputText id="publicationplace" @bind-Value="Book.PublicationPlace" class="w-full border border-gray-300 rounded-md p-2" />
                <ValidationMessage For="() => Book.PublicationPlace" class="text-red-500 text-sm" />
            </div>

            <!-- Publication Date -->
            <div class="space-y-1">
                <label for="publicationdate" class="font-medium">Publication Date:</label>
                <InputDate id="publicationdate" @bind-Value="Book.PublicationDate" class="w-full border border-gray-300 rounded-md p-2" />
                <ValidationMessage For="() => Book.PublicationDate" class="text-red-500 text-sm" />
            </div>

            <!-- Buttons -->
            <div class="flex justify-center space-x-4 mt-4">
                <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                    Save
                </button>
                <a href="/books" class="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600">
                    Back to List
                </a>
            </div>
        </EditForm>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private string BookNum { get; set; }

    [SupplyParameterFromForm]
    private Book? Book { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Book ??= await context.TblBook.FirstOrDefaultAsync(m => m.BookNum == BookNum);

        if (Book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateBook()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Book!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BookExists(Book!.BookNum))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/books");
    }

    private bool BookExists(string booknum)
    {
        using var context = DbFactory.CreateDbContext();
        return context.TblBook.Any(e => e.BookNum == booknum);
    }
}
