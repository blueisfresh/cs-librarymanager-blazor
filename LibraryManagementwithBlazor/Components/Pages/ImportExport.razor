@page "/importexport"
@inject BorrowService BorrowService
@inject StudentService StudentService
@inject BookService BookService
@using LibraryManagementwithBlazor.Services
@using System.Diagnostics
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using System.Text;
@using Newtonsoft.Json
@inject MyFileService MyFileService

<div class="p-6 max-w-md mx-auto bg-white rounded-xl shadow-md space-y-6">
    <h3 class="text-xl font-bold text-center">Import / Export von Daten</h3>

    <!-- Export Section -->
    <div class="space-y-4">
        <h4 class="font-semibold">Exportieren</h4>
        <div class="space-y-2">
            @foreach (var radiobtn in ExportRadioButtons)
            {
                <div>
                    <input type="radio" name="exportOption" id="@radiobtn.Id" value="@radiobtn.Value.ToString()"
                           @onchange="ExportSelection"
                           checked="@(SelectedExportOption == radiobtn.Value.ToString())" />
                    <label for="@radiobtn.Id">@radiobtn.Text</label>
                </div>
            }

        </div>
        <div class="flex items-center space-x-2">
            <span>Datei Format:</span>
            <span class="font-medium">JSON</span>
        </div>
        <div class="text-center">
            <button class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600" @onclick="ExportData">Exportieren</button>
        </div>
    </div>

    <!-- Import Section -->
    <div class="space-y-4">
        <h4 class="font-semibold">Importieren</h4>
        <div class="space-y-2">
            @foreach (var radiobtn in ImportRadioButtons)
            {
                <div>
                    <input type="radio" name="importOption" id="@radiobtn.Id" value="@radiobtn.Value" @onchange="ImportSelection"
                           checked="@(string.Equals(SelectedImportOption, radiobtn.Value.ToString(), StringComparison.OrdinalIgnoreCase))" />
                    <label for="@radiobtn.Id">@radiobtn.Text</label>
                </div>
            }
        </div>
        <div class="flex items-center space-x-4">
            <label class="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 cursor-pointer">
                Durchsuchen
                <InputFile OnChange="FileSelected" class="hidden" />
            </label>
            <input type="text" readonly class="w-full p-2 border border-gray-300 rounded-md" value="@fileName" placeholder="Keine Datei ausgewählt" />
        </div>



        <div class="flex items-center space-x-2">
            <span>Datei Format:</span>
            <span class="font-medium">JSON</span>
        </div>
        <div class="text-center">
            <button class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600" @onclick="ImportData">Importieren</button>
        </div>
    </div>

    <!-- Back Button -->
    <div class="text-center">
        <button class="px-6 py-2 bg-red-500 text-white rounded-md hover:bg-red-600">
            Zurück zum Hauptmenü
        </button>
    </div>
</div>

@code {
    private ElementReference fileInput;
    private string fileName = string.Empty;

    private string? SelectedOption;

    private void OnSelectionChanged(ChangeEventArgs e)
    {
        SelectedOption = e.Value?.ToString();
    }

    private IBrowserFile? SelectedFile;

    private bool IsSelected(string option)
    {
        return SelectedOption == option;
    }

    private string SelectedExportOption { get; set; } = string.Empty;
    private string SelectedImportOption { get; set; } = string.Empty;

    public RadioButton[] ExportRadioButtons = new[]
    {
        new RadioButton { Id = "exportBooks", Value = 1, Text = "Bücher" },
        new RadioButton { Id = "exportStudents", Value = 2, Text = "Schüler" }
    };

    public RadioButton[] ImportRadioButtons = new[]
    {
        new RadioButton { Id = "importBooks", Value = 1, Text = "Bücher" },
        new RadioButton { Id = "importStudents", Value = 2, Text = "Schüler" }
    };

    public void ExportSelection(ChangeEventArgs args)
    {
        Debug.WriteLine($"Export option selected: {args.Value}");
        SelectedExportOption = args.Value?.ToString();
    }

    public void ImportSelection(ChangeEventArgs args)
    {
        SelectedImportOption = args.Value.ToString();
    }

    private async Task OpenDialog()
    {
        // Use JS interop to trigger the file dialog
        await JSRuntime.InvokeVoidAsync("openFileDialog");
    }


    private async Task FileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File; // Get the selected file
        if (SelectedFile != null)
        {
            fileName = SelectedFile.Name;
            using var stream = SelectedFile.OpenReadStream();
            // Save or process the file
            await MyFileService.SaveFileAsync(SelectedFile.Name, stream);
        }
        else
        {
            Debug.WriteLine("No file selected or invalid file.");
        }
    }


    private async Task ExportData()
    {
        if (string.IsNullOrEmpty(SelectedExportOption))
        {
            Debug.WriteLine("Bitte wählen Sie eine Exportoption aus.");
            return;
        }

        // Open SaveDialog

        if (SelectedExportOption == "1") // Bücher
        {
            var books = await BookService.GetAllBooksAsync(); // Fetch all books from the database
            string jsonData = System.Text.Json.JsonSerializer.Serialize(books);
            await DownloadFileAsync("books.json", jsonData);
        }
        else if (SelectedExportOption == "2") // Schüler
        {
            var student = await StudentService.GetAllStudentsAsync();
            string jsonData = System.Text.Json.JsonSerializer.Serialize(student);
            await DownloadFileAsync("student.json", jsonData);
            Debug.WriteLine("Exportieren von Schülern.");
        }
    }

    private async Task DownloadFileAsync(string fileName, string content)
    {
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, content);
    }


    private async Task ImportData()
    {
        if (string.IsNullOrEmpty(SelectedImportOption))
        {
            Console.WriteLine("Bitte wählen Sie eine Importoption aus.");
            return;
        }

        if (SelectedFile == null)
        {
            Debug.WriteLine("Please select a file before importing.");
            return;
        }

        try
        {
            using var stream = SelectedFile.OpenReadStream();
            using var reader = new StreamReader(stream, Encoding.UTF8);
            var jsonContent = await reader.ReadToEndAsync();

            if (SelectedImportOption == "1") // Books
            {
                var books = System.Text.Json.JsonSerializer.Deserialize<List<Book>>(jsonContent);
                if (books != null)
                {
                    foreach (var book in books)
                    {
                        // Add each book using the corresponding service
                        await BookService.AddBookAsync(book);
                    }
                    Debug.WriteLine("Books imported successfully.");
                }
                // await BookService.ImportBooksAsync(books);
            }
            else if (SelectedImportOption == "2") // Students
            {
                var students = System.Text.Json.JsonSerializer.Deserialize<List<Student>>(jsonContent);
                if (students != null)
                {
                    foreach (var student in students)
                    {
                        // Add each student using the corresponding service
                        await StudentService.AddStudentAsync(student);
                    }
                    Debug.WriteLine("Students imported successfully.");
                }
                // await StudentService.ImportStudentsAsync(students);
            }

        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error during file import: {ex.Message}");
        }

    }

    public class RadioButton
    {
        public string Id { get; set; }
        public int Value { get; set; }
        public string Text { get; set; }
        public bool Selected { get; set; } = false;
    }
}
